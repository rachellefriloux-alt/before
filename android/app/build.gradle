apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
// apply plugin: 'com.sallie.plugin-injection' // Removed - plugin not found

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file("../../App.tsx")
    reactNativeDir = file("../../node_modules/react-native")
    hermesCommand = "../../node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = file("../../node_modules/@react-native/codegen")

        // Use Expo CLI to bundle the app, this ensures the Metro config
        // works correctly with Expo projects. The @expo/cli package may be
        // a directory (bin executable inside) or a file. Gradle expects a
        // file input for the Hermes bundling task, so prefer the CLI entry
        // file when available.
        def expoCliPath = file("../../node_modules/@expo/cli")
        if (expoCliPath.exists() && expoCliPath.isDirectory()) {
            // common entry point inside the package
                            // prefer the built CLI entry used by the package
                            def builtCli = new File(expoCliPath, 'build/bin/cli')
                            if (builtCli.exists()) {
                                cliFile = builtCli
                            } else {
                                def candidate = new File(expoCliPath, 'bin/expo-cli.js')
                                if (candidate.exists()) {
                                    cliFile = candidate
                                } else {
                                    // fallback to the package directory (some setups) to avoid breaking dev flow
                                    cliFile = expoCliPath
                                }
                            }
        } else {
            cliFile = expoCliPath
        }
    bundleCommand = "export:embed"

    /* Folders */
     //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]

    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // Use compatible Hermes compiler flags. '-O3' is not supported by some hermesc
    // binaries on Windows; use '-O' for optimization instead.
    hermesFlags = ["-O", "-output-source-map", "-Werror", "-w"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * Enable or disable split APKs for better performance.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Enable optimization of resources for release builds
 */
def enableResourceOptimization = true

// Note: removed an `afterEvaluate { android { ... } }` wrapper that recreated the
// android closure and caused task-creation ordering errors on some Gradle versions.
// CMake/dex/aapt options are configured in the main `android {}` block below instead.

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.yourorg.sallie'
    defaultConfig {
        applicationId 'com.yourorg.sallie'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
    externalNativeBuild {
        cmake {
            cppFlags "-Wno-dollar-in-identifier-extension"
            // Use shorter build paths to avoid CMake path length issues
            arguments "-DCMAKE_OBJECT_PATH_MAX=500"
        }
    }
    missingDimensionStrategy "mode", "cloud"
}    flavorDimensions "mode"
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildFeatures {
                buildConfig true
            }
            signingConfig signingConfigs.debug
            externalNativeBuild {
                cmake {
                    cppFlags "-Wno-dollar-in-identifier-extension"
                }
            }
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            shrinkResources true
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs true
            externalNativeBuild {
                cmake {
                    cppFlags "-Wno-dollar-in-identifier-extension"
                    arguments "-DANDROID_STL=c++_shared", "-DCMAKE_BUILD_TYPE=Release"
                }
            }
            buildFeatures {
                buildConfig true
            }
        }
    }

    productFlavors {
        // Cloud-enabled flavor with full features
        cloud {
            dimension "mode"
            applicationIdSuffix ".cloud"
            buildConfigField "boolean", "LOCAL_ONLY", "false"
            manifestPlaceholders = [
                appLabel: "Sallie Cloud"
            ]
        }

        // Local-only flavor with encrypted local storage
        localOnly {
            dimension "mode"
            applicationIdSuffix ".local"
            buildConfigField "boolean", "LOCAL_ONLY", "true"
            manifestPlaceholders = [
                appLabel: "Sallie Local"
            ]
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/*.kotlin_module']
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
    
    // Enable split APKs for faster downloads and reduced size
    splits {
        abi {
            reset()
            enable true
            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            universalApk false
        }
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Split option: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    // Trim all elements in place.
    for (i in 0..<options.size()) options[i] = options[i].trim();
    // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // Firebase dependencies
    implementation 'com.google.firebase:firebase-analytics:22.1.0'
    implementation 'com.google.firebase:firebase-auth:23.1.0'
    implementation 'com.google.firebase:firebase-firestore:25.1.0'
    implementation 'com.google.firebase:firebase-storage:21.0.1'
    implementation 'com.google.firebase:firebase-crashlytics:19.1.0'
}

// Plugin injection system removed - custom plugins not implemented
// sallieBuildInjection block and related tasks commented out to allow build to proceed

// Create convenience tasks for common nested build scenarios
// task buildSallieModule(type: GradleBuildWithPlugins) { ... }
// task buildSallieCore(type: GradleBuildWithPlugins) { ... }
// task verifyPluginInjection { ... }

// Add verification to build process
// build.dependsOn verifyPluginInjection
