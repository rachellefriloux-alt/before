BASE: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\tooling-api\org\gradle\tooling\model\gradle\GradleBuild.java
OTHER: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\core\org\gradle\api\tasks\GradleBuild.java
---- DIFF ----
 * Copyright 2009 the original author or authors.
package org.gradle.api.tasks;
import org.gradle.StartParameter;
import org.gradle.api.internal.ConventionTask;
import org.gradle.api.internal.StartParameterInternal;
import org.gradle.internal.instrumentation.api.annotations.ToBeReplacedByLazyProperty;
import org.gradle.work.DisableCachingByDefault;
import java.io.File;
import java.util.Collection;
import java.util.List;
import static org.gradle.internal.build.NestedRootBuildRunner.createStartParameterForNewBuild;
import static org.gradle.internal.build.NestedRootBuildRunner.runNestedRootBuild;
 * Executes a Gradle build.
@DisableCachingByDefault(because = "Child Gradle build will do its own caching")
public abstract class GradleBuild extends ConventionTask {
    private StartParameter startParameter;
    private String buildName;
    public GradleBuild() {
        this.startParameter = createStartParameterForNewBuild(getServices());
        startParameter.setCurrentDir(getProject().getProjectDir());
    }
     * Returns the full set of parameters that will be used to execute the build.
     * @return the parameters. Never returns null.
    @Internal
    @ToBeReplacedByLazyProperty
    public StartParameter getStartParameter() {
        return startParameter;
    }
     * Sets the full set of parameters that will be used to execute the build.
     * @param startParameter the parameters. Should not be null.
    public void setStartParameter(StartParameter startParameter) {
        this.startParameter = startParameter;
    }
     * Returns the project directory for the build. Defaults to the project directory.
     * @return The project directory. Never returns null.
    @Internal
    @ToBeReplacedByLazyProperty
    public File getDir() {
        return getStartParameter().getCurrentDir();
    }

     * Sets the project directory for the build.
     * @param dir The project directory. Should not be null.
     * @since 4.0
    public void setDir(File dir) {
        setDir((Object) dir);
    }

     * Sets the project directory for the build.
     * @param dir The project directory. Should not be null.
    public void setDir(Object dir) {
        getStartParameter().setCurrentDir(getProject().file(dir));
    }

    /**
     * Returns the tasks that should be executed for this build.
     * @return The sequence. May be empty. Never returns null.
     */
    @Input
    @ToBeReplacedByLazyProperty
    public List<String> getTasks() {
        return getStartParameter().getTaskNames();
    }

    /**
     * Sets the tasks that should be executed for this build.
     * @param tasks The task names. May be empty or null to use the default tasks for the build.
     * @since 4.0
     */
    public void setTasks(List<String> tasks) {
        setTasks((Collection<String>) tasks);
    }

    /**
     * Sets the tasks that should be executed for this build.
     * @param tasks The task names. May be empty or null to use the default tasks for the build.
     */
    public void setTasks(Collection<String> tasks) {
        getStartParameter().setTaskNames(tasks);
    }

    /**
     * The build name to use for the nested build.
     * <p>
     * If no value is specified, the name of the directory of the build will be used.
     * @return the build name to use for the nested build (or null if the default is to be used)
     * @since 6.0
     */
    @Internal
    @ToBeReplacedByLazyProperty
    public String getBuildName() {
        return buildName;
    }

    /**
     * Sets build name to use for the nested build.
     *
     * @param buildName the build name to use for the nested build
     * @since 6.0
     */
    public void setBuildName(String buildName) {
        this.buildName = buildName;
    }
    /**
     * Executes a nested Gradle build using the specified start parameters and build name.
        // TODO: Implement support for injecting specific plugins into nested builds via StartParameter or build configuration,
        // so that custom plugins can be applied to child builds when executing GradleBuild tasks.
     */
    @TaskAction
    void build() {
        // TODO: Allow us to inject plugins into nested builds too.
        StartParameter startParam = getStartParameter();
        if (startParam instanceof StartParameterInternal) {
            runNestedRootBuild(buildName, (StartParameterInternal) startParam, getServices());
        } else {
            throw new IllegalStateException("StartParameter is not an instance of StartParameterInternal");
        }
    }
        }
    }
import org.gradle.tooling.model.BuildModel;
import org.gradle.tooling.model.DomainObjectSet;
import org.gradle.tooling.model.Model;
 * Provides information about the structure of a Gradle build.
 *
 * @since 1.8
public interface GradleBuild extends Model, BuildModel {
     * Returns the identifier for this Gradle build.
     * @since 2.13
    @Override
    BuildIdentifier getBuildIdentifier();
     * Returns the root project for this build.
     * @return The root project
    BasicGradleProject getRootProject();
     * Returns the set of all projects for this build.
     * @return The set of all projects.
    DomainObjectSet<? extends BasicGradleProject> getProjects();
     * Returns the included builds that were referenced by this build. This is the set of builds that were directly included by this build via its {@link org.gradle.api.initialization.Settings} instance.
     * <p>Note that this set does not include builds that are added in other ways, such as a `buildSrc` build.
     * Also note that a build may be included by multiple builds, so that the inclusions form a graph of builds rather than a tree of builds. There may be cycles in this graph.</p>
     * <p>In general, it is better to use {@link #getEditableBuilds()} instead of this method.</p>
     * @since 3.3
    DomainObjectSet<? extends GradleBuild> getIncludedBuilds();
     * Returns all builds contained in this build that should be imported into an IDE.
     * <p>This is not always the same the builds returned by {@link #getIncludedBuilds()}. For the root build, the set of importable builds contains all builds that participate in the composite build,
     * including those directly included by the root build plus all builds included transitively. For Gradle 7.2 and later, this set also includes any `buildSrc` builds that may be present.
     * For all other builds, this set is empty.</p>
     * <p>Note that this set does not include the root build itself.</p>
     * @since 4.10
    DomainObjectSet<? extends GradleBuild> getEditableBuilds();
