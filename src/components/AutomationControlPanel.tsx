import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Switch, Alert, Modal, TextInput } from 'react-native';
import EnhancedAndroidLauncher, { AutomationRule, SystemInfo } from './utils/EnhancedAndroidLauncher';

interface AutomationControlPanelProps {
  launcher: EnhancedAndroidLauncher | null;
  isEnhanced: boolean;
  systemInfo: SystemInfo | null;
}

export default function AutomationControlPanel({ launcher, isEnhanced, systemInfo }: AutomationControlPanelProps) {
  const [automationRules, setAutomationRules] = useState<AutomationRule[]>([]);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [newRule, setNewRule] = useState({
    name: '',
    description: '',
    trigger: { type: 'time', conditions: {} },
    actions: [],
    enabled: true,
    priority: 1,
    tags: [],
  });

  useEffect(() => {
    if (launcher && isEnhanced) {
      loadAutomationRules();
    }
  }, [launcher, isEnhanced]);

  const loadAutomationRules = async () => {
    if (!launcher) return;
    try {
      const rules = launcher.getAutomationRules();
      setAutomationRules(rules);
    } catch (error) {
      console.error('Failed to load automation rules:', error);
    }
  };

  const toggleRule = async (ruleId: string, enabled: boolean) => {
    if (!launcher) return;
    try {
      const updatedRules = automationRules.map(rule => 
        rule.id === ruleId ? { ...rule, enabled } : rule
      );
      setAutomationRules(updatedRules);
      // In real implementation, this would update the launcher's rules
    } catch (error) {
      console.error('Failed to toggle rule:', error);
    }
  };

  const deleteRule = async (ruleId: string) => {
    if (!launcher) return;
    try {
      const success = await launcher.removeAutomationRule(ruleId);
      if (success) {
        setAutomationRules(rules => rules.filter(rule => rule.id !== ruleId));
      }
    } catch (error) {
      console.error('Failed to delete rule:', error);
    }
  };

  const createRule = async () => {
    if (!launcher || !newRule.name.trim()) return;
    
    try {
      const completeRule: AutomationRule = {
        ...newRule,
        id: '', // Will be generated by the launcher
        created: Date.now(),
        triggerCount: 0
      };
      const ruleId = await launcher.addAutomationRule(completeRule);
      if (ruleId) {
        await loadAutomationRules();
        setShowCreateModal(false);
        setNewRule({
          name: '',
          description: '',
          trigger: { type: 'time', conditions: {} },
          actions: [],
          enabled: true,
          priority: 1,
          tags: [],
        });
      }
    } catch (error) {
      console.error('Failed to create rule:', error);
    }
  };

  const getTriggerIcon = (triggerType: string) => {
    switch (triggerType) {
      case 'time': return '‚è∞';
      case 'location': return 'üìç';
      case 'battery': return 'üîã';
      case 'network': return 'üì∂';
      case 'app_usage': return 'üì±';
      case 'ai_decision': return 'üß†';
      default: return '‚öôÔ∏è';
    }
  };

  const formatTriggerDescription = (rule: AutomationRule) => {
    switch (rule.trigger.type) {
      case 'time':
        return `When time is ${rule.trigger.conditions.hour || 'any'}:${rule.trigger.conditions.minute || '00'}`;
      case 'battery':
        return `When battery ${rule.trigger.conditions.level ? `drops to ${rule.trigger.conditions.level}%` : 'changes'}`;
      case 'location':
        return 'When location changes';
      case 'network':
        return `When connected to ${rule.trigger.conditions.type || 'any network'}`;
      case 'app_usage':
        return `When app usage exceeds ${rule.trigger.conditions.dailyUsage || 'threshold'}`;
      case 'ai_decision':
        return 'When AI determines appropriate';
      default:
        return 'Custom trigger';
    }
  };

  const formatActionsDescription = (actions: any[]) => {
    if (actions.length === 0) return 'No actions';
    return actions.map(action => {
      switch (action.type) {
        case 'launch_app': return `Launch ${action.parameters.appName || 'app'}`;
        case 'set_brightness': return `Set brightness to ${action.parameters.level * 100}%`;
        case 'send_message': return 'Send message';
        case 'ai_decision': return 'AI-powered action';
        default: return 'Custom action';
      }
    }).join(', ');
  };

  if (!isEnhanced) {
    return (
      <View style={styles.emptyContainer}>
        <Text style={styles.emptyText}>
          ü§ñ Automation controls require enhanced mode
        </Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerText}>ü§ñ Automation Control Center</Text>
        <TouchableOpacity 
          style={styles.addButton}
          onPress={() => setShowCreateModal(true)}
        >
          <Text style={styles.addButtonText}>+ Add Rule</Text>
        </TouchableOpacity>
      </View>

      {systemInfo && (
        <View style={styles.systemStatus}>
          <Text style={styles.statusTitle}>System Status</Text>
          <View style={styles.statusGrid}>
            <View style={styles.statusItem}>
              <Text style={styles.statusIcon}>üîã</Text>
              <Text style={styles.statusText}>
                {systemInfo.batteryLevel}% {systemInfo.batteryCharging ? '‚ö°' : ''}
              </Text>
            </View>
            <View style={styles.statusItem}>
              <Text style={styles.statusIcon}>üì∂</Text>
              <Text style={styles.statusText}>
                {systemInfo.networkInfo.isWifiConnected ? 'WiFi' : 'Mobile'}
              </Text>
            </View>
            <View style={styles.statusItem}>
              <Text style={styles.statusIcon}>üí°</Text>
              <Text style={styles.statusText}>
                {Math.round(systemInfo.brightness * 100)}%
              </Text>
            </View>
          </View>
        </View>
      )}

      <ScrollView style={styles.rulesList}>
        {automationRules.map((rule) => (
          <View key={rule.id} style={styles.ruleCard}>
            <View style={styles.ruleHeader}>
              <View style={styles.ruleTitleRow}>
                <Text style={styles.triggerIcon}>{getTriggerIcon(rule.trigger.type)}</Text>
                <Text style={styles.ruleName}>{rule.name}</Text>
                <Switch
                  value={rule.enabled}
                  onValueChange={(enabled) => toggleRule(rule.id, enabled)}
                  trackColor={{ false: '#444444', true: '#4CAF50' }}
                  thumbColor={rule.enabled ? '#FFFFFF' : '#CCCCCC'}
                />
              </View>
              
              <Text style={styles.ruleDescription}>{rule.description}</Text>
              
              <View style={styles.ruleDetails}>
                <Text style={styles.triggerText}>
                  üìã {formatTriggerDescription(rule)}
                </Text>
                <Text style={styles.actionsText}>
                  ‚ö° {formatActionsDescription(rule.actions)}
                </Text>
              </View>

              <View style={styles.ruleFooter}>
                <View style={styles.ruleStats}>
                  <Text style={styles.statText}>
                    Priority: {rule.priority} | Triggered: {rule.triggerCount} times
                  </Text>
                  {rule.lastTriggered && (
                    <Text style={styles.statText}>
                      Last: {new Date(rule.lastTriggered).toLocaleString()}
                    </Text>
                  )}
                </View>
                
                <TouchableOpacity
                  style={styles.deleteButton}
                  onPress={() => Alert.alert(
                    'Delete Rule',
                    `Are you sure you want to delete "${rule.name}"?`,
                    [
                      { text: 'Cancel', style: 'cancel' },
                      { text: 'Delete', style: 'destructive', onPress: () => deleteRule(rule.id) }
                    ]
                  )}
                >
                  <Text style={styles.deleteButtonText}>üóëÔ∏è</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        ))}

        {automationRules.length === 0 && (
          <View style={styles.emptyRules}>
            <Text style={styles.emptyRulesText}>
              No automation rules configured yet.{'\n'}
              Create your first rule to get started!
            </Text>
          </View>
        )}
      </ScrollView>

      <Modal
        visible={showCreateModal}
        animationType="slide"
        presentationStyle="pageSheet"
        onRequestClose={() => setShowCreateModal(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Create Automation Rule</Text>
            <TouchableOpacity onPress={() => setShowCreateModal(false)}>
              <Text style={styles.modalCloseButton}>‚úï</Text>
            </TouchableOpacity>
          </View>
          
          <ScrollView style={styles.modalContent}>
            <Text style={styles.inputLabel}>Rule Name</Text>
            <TextInput
              style={styles.textInput}
              value={newRule.name}
              onChangeText={(text) => setNewRule({...newRule, name: text})}
              placeholder="Enter rule name"
              placeholderTextColor="#666"
            />
            
            <Text style={styles.inputLabel}>Description</Text>
            <TextInput
              style={[styles.textInput, { height: 80 }]}
              value={newRule.description}
              onChangeText={(text) => setNewRule({...newRule, description: text})}
              placeholder="Describe what this rule does"
              placeholderTextColor="#666"
              multiline
            />
            
            <Text style={styles.sectionTitle}>Trigger Configuration</Text>
            <Text style={styles.helpText}>
              For this demo, rules can be created but full trigger configuration 
              requires native integration.
            </Text>
            
            <Text style={styles.sectionTitle}>Actions</Text>
            <Text style={styles.helpText}>
              Actions will be executed when the trigger conditions are met.
              Full action configuration coming in advanced settings.
            </Text>
          </ScrollView>
          
          <View style={styles.modalFooter}>
            <TouchableOpacity 
              style={[styles.modalButton, styles.cancelButton]}
              onPress={() => setShowCreateModal(false)}
            >
              <Text style={styles.cancelButtonText}>Cancel</Text>
            </TouchableOpacity>
            <TouchableOpacity 
              style={[styles.modalButton, styles.createButton]}
              onPress={createRule}
            >
              <Text style={styles.createButtonText}>Create Rule</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#1a1a1a',
    borderRadius: 12,
    margin: 10,
    padding: 15,
  },
  emptyContainer: {
    backgroundColor: '#1a1a1a',
    borderRadius: 12,
    margin: 10,
    padding: 20,
    alignItems: 'center',
  },
  emptyText: {
    color: '#888',
    fontSize: 14,
    textAlign: 'center',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  headerText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: 'bold',
  },
  addButton: {
    backgroundColor: '#4CAF50',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 15,
  },
  addButtonText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
  },
  systemStatus: {
    backgroundColor: '#2a2a2a',
    borderRadius: 8,
    padding: 12,
    marginBottom: 15,
  },
  statusTitle: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginBottom: 8,
  },
  statusGrid: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  statusItem: {
    alignItems: 'center',
  },
  statusIcon: {
    fontSize: 16,
    marginBottom: 2,
  },
  statusText: {
    color: '#CCCCCC',
    fontSize: 10,
  },
  rulesList: {
    maxHeight: 400,
  },
  ruleCard: {
    backgroundColor: '#2a2a2a',
    borderRadius: 8,
    marginBottom: 10,
    overflow: 'hidden',
  },
  ruleHeader: {
    padding: 15,
  },
  ruleTitleRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  triggerIcon: {
    fontSize: 16,
    marginRight: 10,
  },
  ruleName: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    flex: 1,
  },
  ruleDescription: {
    color: '#AAAAAA',
    fontSize: 12,
    marginBottom: 10,
  },
  ruleDetails: {
    marginBottom: 10,
  },
  triggerText: {
    color: '#4CAF50',
    fontSize: 11,
    marginBottom: 2,
  },
  actionsText: {
    color: '#FF9800',
    fontSize: 11,
  },
  ruleFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  ruleStats: {
    flex: 1,
  },
  statText: {
    color: '#888888',
    fontSize: 10,
  },
  deleteButton: {
    padding: 8,
  },
  deleteButtonText: {
    fontSize: 16,
  },
  emptyRules: {
    padding: 20,
    alignItems: 'center',
  },
  emptyRulesText: {
    color: '#666666',
    fontSize: 14,
    textAlign: 'center',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: '#1a1a1a',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#333333',
  },
  modalTitle: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: 'bold',
  },
  modalCloseButton: {
    color: '#AAAAAA',
    fontSize: 20,
  },
  modalContent: {
    flex: 1,
    padding: 20,
  },
  inputLabel: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginBottom: 5,
    marginTop: 10,
  },
  textInput: {
    backgroundColor: '#2a2a2a',
    borderWidth: 1,
    borderColor: '#444444',
    borderRadius: 8,
    padding: 12,
    color: '#FFFFFF',
    fontSize: 14,
  },
  sectionTitle: {
    color: '#4CAF50',
    fontSize: 16,
    fontWeight: 'bold',
    marginTop: 20,
    marginBottom: 10,
  },
  helpText: {
    color: '#AAAAAA',
    fontSize: 12,
    fontStyle: 'italic',
  },
  modalFooter: {
    flexDirection: 'row',
    padding: 20,
    borderTopWidth: 1,
    borderTopColor: '#333333',
  },
  modalButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  cancelButton: {
    backgroundColor: '#444444',
    marginRight: 10,
  },
  createButton: {
    backgroundColor: '#4CAF50',
    marginLeft: 10,
  },
  cancelButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
  },
  createButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
  },
});