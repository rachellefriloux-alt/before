BASE: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\model-core\org\gradle\model\internal\typeregistration\InstanceFactory.java
OTHER: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\model-core\org\gradle\internal\instantiation\InstanceFactory.java
---- DIFF ----
 * Copyright 2018 the original author or authors.
package org.gradle.internal.instantiation;
import org.gradle.internal.service.ServiceLookup;
import java.lang.annotation.Annotation;
/**
 * Creates instances of the given type. This is similar to {@link org.gradle.internal.reflect.Instantiator}, but produces instances of the given type only. This allows it to provides some
 * additional metadata about the type, such as which services it requires, and may be faster at creating instances due to the extra context it holds.
 */
     * Is the given service required to be injected by type?
    boolean requiresService(Class<?> serviceType);
     * Is any service injection triggered by the given annotation?
    boolean serviceInjectionTriggeredByAnnotation(Class<? extends Annotation> injectAnnotation);
    /**
     * Creates a new instance from the given services and parameters.
     */
    T newInstance(ServiceLookup services, Object... params);
    /**
     * Creates a new instance from the given parameters and the default services.
     */
    T newInstance(Object... params);
 * Copyright 2016 the original author or authors.
package org.gradle.model.internal.typeregistration;
import org.gradle.model.internal.core.MutableModelNode;
import org.gradle.model.internal.type.ModelType;
import org.jspecify.annotations.Nullable;
import java.util.Set;
    ModelType<T> getBaseInterface();
    Set<ModelType<? extends T>> getSupportedTypes();
     * Return information about the implementation of an unmanaged type.
    @Nullable
    <S extends T> ImplementationInfo getImplementationInfo(ModelType<S> publicType);
     * Return information about the implementation of a managed type with an unmanaged super-type.
    <S extends T> ImplementationInfo getManagedSubtypeImplementationInfo(ModelType<S> publicType);
    interface ImplementationInfo {
        /**
         * Creates an instance of the delegate for the given node.
         */
        Object create(MutableModelNode modelNode);

        /**
         * The default implementation type that can be used as a delegate for any managed subtypes of the public type.
         */
        ModelType<?> getDelegateType();

        /**
         * The internal views for the public type.
         */
        Set<ModelType<?>> getInternalViews();
    }

