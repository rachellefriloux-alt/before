BASE: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\platform-native\org\gradle\nativeplatform\toolchain\internal\msvcpp\CPCHCompiler.java
OTHER: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\platform-native\org\gradle\nativeplatform\toolchain\internal\gcc\CPCHCompiler.java
---- DIFF ----
package org.gradle.nativeplatform.toolchain.internal.gcc;
import org.gradle.internal.Transformers;
public class CPCHCompiler extends GccCompatibleNativeCompiler<CPCHCompileSpec> {
    public CPCHCompiler(BuildOperationExecutor buildOperationExecutor, CompilerOutputFileNamingSchemeFactory compilerOutputFileNamingSchemeFactory, CommandLineToolInvocationWorker commandLineTool, CommandLineToolContext invocationContext, String objectFileExtension, boolean useCommandFile, WorkerLeaseService workerLeaseService) {
        super(buildOperationExecutor, compilerOutputFileNamingSchemeFactory, commandLineTool, invocationContext, new CPCHCompileArgsTransformer(), Transformers.<CPCHCompileSpec>noOpTransformer(), objectFileExtension, useCommandFile, workerLeaseService);
    private static class CPCHCompileArgsTransformer extends GccCompilerArgsTransformer<CPCHCompileSpec> {
        @Override
        protected String getLanguage() {
            return "c-header";
        }
package org.gradle.nativeplatform.toolchain.internal.msvcpp;
import org.gradle.api.Transformer;
import java.io.File;
import java.util.Collections;
import java.util.List;
public class CPCHCompiler extends VisualCppNativeCompiler<CPCHCompileSpec> {
    CPCHCompiler(BuildOperationExecutor buildOperationExecutor, CompilerOutputFileNamingSchemeFactory compilerOutputFileNamingSchemeFactory, CommandLineToolInvocationWorker commandLineToolInvocationWorker, CommandLineToolContext invocationContext, Transformer<CPCHCompileSpec, CPCHCompileSpec> specTransformer, String objectFileExtension, boolean useCommandFile, WorkerLeaseService workerLeaseService) {
        super(buildOperationExecutor, compilerOutputFileNamingSchemeFactory, commandLineToolInvocationWorker, invocationContext, new VisualCppPCHCompilerArgsTransformer<CPCHCompileSpec>(), specTransformer, objectFileExtension, useCommandFile, workerLeaseService);
    @Override
    protected List<String> getOutputArgs(CPCHCompileSpec spec, File outputFile) {
        return Collections.singletonList("/Fp" + outputFile.getAbsolutePath());

