BASE: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\model-reflect\org\gradle\internal\reflect\validation\DefaultPluginId.java
OTHER: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\core\org\gradle\plugin\use\internal\DefaultPluginId.java
---- DIFF ----
 * Copyright 2016 the original author or authors.
package org.gradle.plugin.use.internal;
import com.google.common.base.CharMatcher;
import org.gradle.plugin.internal.InvalidPluginIdException;
import org.gradle.plugin.use.PluginId;
import static com.google.common.base.CharMatcher.anyOf;
import static com.google.common.base.CharMatcher.inRange;
public class DefaultPluginId implements PluginId {
    public static final String SEPARATOR = ".";
    public static final String ID_SEPARATOR_ON_START_OR_END = "cannot begin or end with '" + SEPARATOR + "'";
    public static final String DOUBLE_SEPARATOR = "cannot contain '" + SEPARATOR + SEPARATOR + "'";
    public static final String PLUGIN_ID_VALID_CHARS_DESCRIPTION = "ASCII alphanumeric characters, '.', '_' and '-'";
    public static final CharMatcher INVALID_PLUGIN_ID_CHAR_MATCHER = inRange('a', 'z')
        .or(inRange('A', 'Z'))
        .or(inRange('0', '9'))
        .or(anyOf(".-_"))
        .negate();
    public static PluginId of(String value) throws InvalidPluginIdException {
        validate(value);
        return new DefaultPluginId(value);
    public static PluginId unvalidated(String value) {
        return new DefaultPluginId(value);
    public static void validate(String value) throws InvalidPluginIdException {
        if (value.startsWith(SEPARATOR) || value.endsWith(SEPARATOR)) {
            throw new InvalidPluginIdException(value, ID_SEPARATOR_ON_START_OR_END);
        } else if (value.contains(SEPARATOR + SEPARATOR)) {
            throw new InvalidPluginIdException(value, DOUBLE_SEPARATOR);
        } else {
            int invalidCharIndex = INVALID_PLUGIN_ID_CHAR_MATCHER.indexIn(value);
            if (invalidCharIndex >= 0) {
                char invalidChar = value.charAt(invalidCharIndex);
                throw new InvalidPluginIdException(value, invalidPluginIdCharMessage(invalidChar));
            }
    public static String invalidPluginIdCharMessage(char invalidChar) {
        return "Plugin id contains invalid char '" + invalidChar + "' (only " + PLUGIN_ID_VALID_CHARS_DESCRIPTION + " characters are valid)";
    public PluginId withNamespace(String namespace) {
        if (isQualified()) {
            throw new IllegalArgumentException(this + " is already qualified");
        } else {
            return new DefaultPluginId(namespace + SEPARATOR + value);

    }

    @Override
    }

    @Override
    }

    @Override
        }
        }



    }

    @Override
    }

 * Copyright 2023 the original author or authors.
package org.gradle.internal.reflect.validation;
import org.jspecify.annotations.NullMarked;
@NullMarked
public class DefaultPluginId {
    private static final String SEPARATOR = ".";
