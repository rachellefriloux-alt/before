version: '3.8'

services:
  sallie:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - COPILOT_APP_ID=${COPILOT_APP_ID}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_API_KEY=${FIREBASE_API_KEY}
      - REDIS_URL=${REDIS_URL}
      - LOG_LEVEL=${LOG_LEVEL}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - SESSION_SECRET=${SESSION_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - UPLOAD_PATH=${UPLOAD_PATH}
    volumes:
      - ./config:/app/config:ro
      - ./serviceAccount.json:/app/serviceAccount.json:ro
    networks:
      - sallie-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

  sallie-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
      - "5001:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - COPILOT_APP_ID=${COPILOT_APP_ID}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_API_KEY=${FIREBASE_API_KEY}
      - REDIS_URL=${REDIS_URL}
      - LOG_LEVEL=${LOG_LEVEL}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - SESSION_SECRET=${SESSION_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - UPLOAD_PATH=${UPLOAD_PATH}
    volumes:
      - .:/app
      - /app/node_modules
      - ./config:/app/config:ro
      - ./serviceAccount.json:/app/serviceAccount.json:ro
    networks:
      - sallie-network
    restart: unless-stopped
    profiles:
      - dev

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sallie-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:

networks:
  sallie-network:
    driver: bridge
