BASE: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\kotlin-dsl\org\gradle\kotlin\dsl\support\IO.kt
OTHER: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\kotlin-dsl\org\gradle\kotlin\dsl\concurrent\IO.kt
---- DIFF ----
 * Copyright 2018 the original author or authors.
package org.gradle.kotlin.dsl.concurrent
import org.gradle.api.Project
import org.gradle.internal.service.scopes.Scope
import org.gradle.internal.service.scopes.ServiceScope
import org.gradle.kotlin.dsl.support.serviceOf
import org.gradle.kotlin.dsl.support.useToRun
 * A scheduler of IO actions.
interface IO {
    /**
     * Schedules the given [io action][action] for execution.
     *
     * The effect of an IO [action] is only guaranteed to be observable
     * by a subsequent [io] action or after the [closing][IOScope.close] of
     * the current [IOScope].
     */
    fun io(action: () -> Unit)
}
/**
 * Schedules the writing of the given [file].
 */
fun IO.writeFile(file: File, bytes: ByteArray) = io {
    file.writeBytes(bytes)
}
/**
 * A scope for the scheduling of IO actions.
 *
 * [close] guarantees all scheduled IO actions are executed before returning.
 *
 * Each [IOScope] operates independently and failures in one [IOScope]
 * do not affect existing or future [IOScope]s.
 *
 * Each [IOScope] can only be used from a single thread at a time.
 */
interface IOScope : IO, AutoCloseable


/**
 * A Gradle build service to offload IO actions to a dedicated thread.
 */
@ServiceScope(Scope.Build::class)
interface AsyncIOScopeFactory {
    fun newScope(): IOScope
}


fun <T> withAsynchronousIO(
    project: Project,
    action: IO.() -> T
): T = project.serviceOf<AsyncIOScopeFactory>().runBlocking(action)


fun <T> AsyncIOScopeFactory.runBlocking(
    action: IO.() -> T
): T = newScope().useToRun(action)


internal
inline fun withSynchronousIO(action: IO.() -> Unit) {
    action(SynchronousIO)
}


internal
object SynchronousIO : IO {
    override fun io(action: () -> Unit) = action()
}

 * Copyright 2017 the original author or authors.
package org.gradle.kotlin.dsl.support
fun userHome() = File(System.getProperty("user.home"))
inline fun <T : AutoCloseable, U> T.useToRun(action: T.() -> U): U =
    use { run(action) }
fun File.isParentOf(child: File): Boolean =
    child.canonicalPath.startsWith(canonicalPath)
 * List files ordered by filename for reproducibility.
 * Never returns null.
fun File.listFilesOrdered(filter: ((File) -> Boolean)? = null): List<File> =
    listFiles()
        ?.let { if (filter != null) it.filter(filter) else it.asList() }
        ?.sortedBy { it.name }
        ?: emptyList()
