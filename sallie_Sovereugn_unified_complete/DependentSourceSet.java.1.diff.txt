BASE: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\platform-native\org\gradle\language\nativeplatform\DependentSourceSet.java
OTHER: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\platform-base\org\gradle\language\base\DependentSourceSet.java
---- DIFF ----
 * Copyright 2015 the original author or authors.
package org.gradle.language.base;
import org.gradle.platform.base.DependencySpecContainer;
 * A source set that can have dependencies on other Libraries.
    DependencySpecContainer getDependencies();
 * Copyright 2013 the original author or authors.
package org.gradle.language.nativeplatform;
import org.gradle.internal.HasInternalProtocol;
import org.gradle.language.base.LanguageSourceSet;
import java.util.Collection;
 * A source set that depends on one or more {@link org.gradle.nativeplatform.NativeDependencySet}s to be built.
@HasInternalProtocol
    /**
     * The libraries that this source set requires.
     */
    Collection<?> getLibs();
    /**
     * Adds a library that this source set requires. This method accepts the following types:
     *
     * <ul>
     *     <li>A {@link org.gradle.nativeplatform.NativeLibrarySpec}</li>
     *     <li>A {@link org.gradle.nativeplatform.NativeDependencySet}</li>
     *     <li>A {@link LanguageSourceSet}</li>
     *     <li>A {@link java.util.Map} containing the library selector.</li>
     * </ul>
     *
     * The Map notation supports the following String attributes:
     *
     * <ul>
     *     <li>project: the path to the project containing the library (optional, defaults to current project)</li>
     *     <li>library: the name of the library (required)</li>
     *     <li>linkage: the library linkage required ['shared'/'static'] (optional, defaults to 'shared')</li>
     * </ul>
     */
    void lib(Object library);

    /**
     * Sets the pre-compiled header to be used when compiling sources in this source set.
     *
     * @param header the header to precompile
     */
    void setPreCompiledHeader(String header);

    /**
     * Returns the pre-compiled header configured for this source set.
     *
     * @return the pre-compiled header
     */
    String getPreCompiledHeader();

