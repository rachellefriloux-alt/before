BASE: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\node_modules\flat-cache\src\utils.js
OTHER: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\node_modules\expect-type\dist\utils.js
---- DIFF ----
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
 * @internal
const secret = Symbol('secret');
 * @internal
const mismatch = Symbol('mismatch');
/**
 * A type which should match anything passed as a value but *doesn't*
 * match {@linkcode Mismatch}. It helps TypeScript select the right overload
 * for {@linkcode PositiveExpectTypeOf.toEqualTypeOf | .toEqualTypeOf()} and
 * {@linkcode PositiveExpectTypeOf.toMatchTypeOf | .toMatchTypeOf()}.
 * @internal
 */
const avalue = Symbol('avalue');
const fs = require('fs');
const path = require('path');
const flatted = require('flatted');
function tryParse(filePath, defaultValue) {
  let result;
  try {
    result = readJSON(filePath);
  } catch (ex) {
    result = defaultValue;
  }
  return result;
}

 * Read json file synchronously using flatted
 * @param  {String} filePath Json filepath
 * @returns {*} parse result
function readJSON(filePath) {
  return flatted.parse(
    fs.readFileSync(filePath, {
      encoding: 'utf8',
    })
  );
}

 * Write json file synchronously using circular-json
 *
 * @param  {String} filePath Json filepath
 * @param  {*} data Object to serialize
function writeJSON(filePath, data) {
  fs.mkdirSync(path.dirname(filePath), {
    recursive: true,
  });
  fs.writeFileSync(filePath, flatted.stringify(data));
}

module.exports = { tryParse, readJSON, writeJSON };

