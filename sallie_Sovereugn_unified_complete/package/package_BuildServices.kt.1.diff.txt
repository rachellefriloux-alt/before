BASE: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\kotlin-dsl\org\gradle\kotlin\dsl\provider\BuildServices.kt
OTHER: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\kotlin-dsl\org\gradle\kotlin\dsl\concurrent\BuildServices.kt
---- DIFF ----
 * Copyright 2018 the original author or authors.
package org.gradle.kotlin.dsl.concurrent
import org.gradle.internal.concurrent.ExecutorFactory
import java.io.Closeable
import java.time.Duration
import java.util.concurrent.ExecutorService
import java.util.concurrent.Future
import java.util.concurrent.TimeUnit
import java.util.concurrent.atomic.AtomicReference
    fun createAsyncIOScopeFactory(executorFactory: ExecutorFactory): AsyncIOScopeFactory =
        DefaultAsyncIOScopeFactory { executorFactory.create("Kotlin DSL Writer", 1) }
interface AsyncIOScopeSettings {
    val ioActionTimeoutMs: Long
}
internal
class JavaSystemPropertiesAsyncIOScopeSettings : AsyncIOScopeSettings {
    companion object {
        const val IO_ACTION_TIMEOUT_SYSTEM_PROPERTY = "org.gradle.kotlin.dsl.internal.io.timeout"
        val DEFAULT_IO_ACTION_TIMEOUT = Duration.ofMinutes(1).toMillis()
    }
    override val ioActionTimeoutMs: Long by lazy {
        System.getProperty(IO_ACTION_TIMEOUT_SYSTEM_PROPERTY)
            .takeIf { !it.isNullOrBlank() }
            ?.let { property ->
                property.toPositiveLongOrNull()
                    ?: throw Exception(
                        "Invalid value for system property '$IO_ACTION_TIMEOUT_SYSTEM_PROPERTY': '$property'. It must be a positive number of milliseconds."
                    )
            }
            ?: DEFAULT_IO_ACTION_TIMEOUT
    }
    fun String.toPositiveLongOrNull() =
        toLongOrNull()?.takeIf { it > 0 }
}
internal
class DefaultAsyncIOScopeFactory(
    private
    val settings: AsyncIOScopeSettings = JavaSystemPropertiesAsyncIOScopeSettings(),
    executorServiceProvider: () -> ExecutorService
) : Closeable, AsyncIOScopeFactory {

    private
    val executorService = lazy(executorServiceProvider)
    override fun newScope(): IOScope = object : IOScope {

        private
        val failure = AtomicReference<Throwable?>(null)

        private
        var pending: Future<*>? = null

        override fun io(action: () -> Unit) {
            // Fail fast
            checkForFailure()
            pending = submit(action)
        }

        override fun close() {
            pending?.get(settings.ioActionTimeoutMs, TimeUnit.MILLISECONDS)
            checkForFailure()
        }

        private
        fun submit(action: () -> Unit): Future<*> =
            executorService.value.submit {
                try {
                    action()
                } catch (error: Throwable) {
                    failure.set(error)
                }
            }

        private
        fun checkForFailure() {
            failure.getAndSet(null)?.let { throw it }
        }
    }

    override fun close() {
        executorService.apply {
            if (isInitialized()) {
                value.shutdown()
            }
        }
    }
}

 * Copyright 2017 the original author or authors.
package org.gradle.kotlin.dsl.provider
import org.gradle.api.internal.ClassPathRegistry
import org.gradle.api.internal.artifacts.dsl.dependencies.DependencyFactoryInternal
import org.gradle.api.internal.classpath.ModuleRegistry
import org.gradle.api.internal.file.FileCollectionFactory
import org.gradle.api.internal.initialization.loadercache.DefaultClasspathHasher
import org.gradle.groovy.scripts.internal.ScriptSourceHasher
import org.gradle.initialization.ClassLoaderScopeRegistry
import org.gradle.initialization.GradlePropertiesController
import org.gradle.internal.buildoption.InternalOptions
import org.gradle.internal.classloader.ClasspathHasher
import org.gradle.internal.classpath.CachedClasspathTransformer
import org.gradle.internal.classpath.transforms.ClasspathElementTransformFactoryForLegacy
import org.gradle.internal.classpath.types.GradleCoreInstrumentationTypeRegistry
import org.gradle.internal.event.ListenerManager
import org.gradle.internal.execution.ExecutionEngine
import org.gradle.internal.execution.FileCollectionSnapshotter
import org.gradle.internal.execution.InputFingerprinter
import org.gradle.internal.fingerprint.classpath.ClasspathFingerprinter
import org.gradle.internal.instrumentation.reporting.PropertyUpgradeReportConfig
import org.gradle.internal.logging.progress.ProgressLoggerFactory
import org.gradle.internal.operations.BuildOperationRunner
import org.gradle.internal.scripts.ScriptExecutionListener
import org.gradle.kotlin.dsl.cache.KotlinDslWorkspaceProvider
import org.gradle.kotlin.dsl.normalization.KotlinCompileClasspathFingerprinter
import org.gradle.kotlin.dsl.normalization.KotlinDslCompileAvoidanceClasspathHashCache
import org.gradle.kotlin.dsl.support.EmbeddedKotlinProvider
import org.gradle.kotlin.dsl.support.ImplicitImports
import org.gradle.plugin.management.internal.PluginHandler
import org.gradle.plugin.use.internal.PluginRequestApplicator
const val KOTLIN_SCRIPT_COMPILATION_AVOIDANCE_ENABLED_PROPERTY =
    "org.gradle.kotlin.dsl.scriptCompilationAvoidance"
    fun createKotlinScriptClassPathProvider(
        moduleRegistry: ModuleRegistry,
        classPathRegistry: ClassPathRegistry,
        classLoaderScopeRegistry: ClassLoaderScopeRegistry,
        dependencyFactory: DependencyFactoryInternal,
    ) =
        KotlinScriptClassPathProvider(
            moduleRegistry,
            classPathRegistry,
            classLoaderScopeRegistry.coreAndPluginsScope,
            gradleApiJarsProviderFor(dependencyFactory),
        )
    @Provides
    fun createPluginRequestsHandler(
        pluginRequestApplicator: PluginRequestApplicator,
        pluginHandler: PluginHandler
    ) =
        PluginRequestsHandler(pluginRequestApplicator, pluginHandler)
    @Provides
    fun createClassPathModeExceptionCollector() =
        ClassPathModeExceptionCollector()
    @Provides
    @Suppress("LongParameterList")
    fun createKotlinScriptEvaluator(
        classPathProvider: KotlinScriptClassPathProvider,
        classloadingCache: KotlinScriptClassloadingCache,
        pluginRequestsHandler: PluginRequestsHandler,
        pluginRequestApplicator: PluginRequestApplicator,
        embeddedKotlinProvider: EmbeddedKotlinProvider,
        classPathModeExceptionCollector: ClassPathModeExceptionCollector,
        kotlinScriptBasePluginsApplicator: KotlinScriptBasePluginsApplicator,
        scriptSourceHasher: ScriptSourceHasher,
        classpathHasher: ClasspathHasher,
        implicitImports: ImplicitImports,
        progressLoggerFactory: ProgressLoggerFactory,
        buildOperationRunner: BuildOperationRunner,
        cachedClasspathTransformer: CachedClasspathTransformer,
        listenerManager: ListenerManager,
        executionEngine: ExecutionEngine,
        workspaceProvider: KotlinDslWorkspaceProvider,
        @Suppress("UNUSED_PARAMETER") kotlinCompilerContextDisposer: KotlinCompilerContextDisposer,
        fileCollectionFactory: FileCollectionFactory,
        inputFingerprinter: InputFingerprinter,
        internalOptions: InternalOptions,
        gradlePropertiesController: GradlePropertiesController,
        transformFactoryForLegacy: ClasspathElementTransformFactoryForLegacy,
        gradleCoreTypeRegistry: GradleCoreInstrumentationTypeRegistry,
        propertyUpgradeReportConfig: PropertyUpgradeReportConfig
    ): KotlinScriptEvaluator =
        StandardKotlinScriptEvaluator(
            classPathProvider,
            classloadingCache,
            pluginRequestApplicator,
            pluginRequestsHandler,
            embeddedKotlinProvider,
            classPathModeExceptionCollector,
            kotlinScriptBasePluginsApplicator,
            scriptSourceHasher,
            classpathHasher,
            implicitImports,
            progressLoggerFactory,
            buildOperationRunner,
            cachedClasspathTransformer,
            listenerManager.getBroadcaster(ScriptExecutionListener::class.java),
            executionEngine,
            workspaceProvider,
            fileCollectionFactory,
            inputFingerprinter,
            internalOptions,
            gradlePropertiesController,
            transformFactoryForLegacy,
            gradleCoreTypeRegistry,
            propertyUpgradeReportConfig
        )
    @Provides
    fun createCompileClasspathHasher(
        kotlinDslCompileAvoidanceClasspathHashCache: KotlinDslCompileAvoidanceClasspathHashCache,
        fileCollectionSnapshotter: FileCollectionSnapshotter,
        fileCollectionFactory: FileCollectionFactory,
        classpathFingerprinter: ClasspathFingerprinter
    ): ClasspathHasher =
        DefaultClasspathHasher(
            fileCollectionSnapshotter,
            if (isKotlinScriptCompilationAvoidanceEnabled) {
                KotlinCompileClasspathFingerprinter(kotlinDslCompileAvoidanceClasspathHashCache)
            } else {
                classpathFingerprinter
            },
            fileCollectionFactory
        )
    @Provides
    fun createKotlinCompilerContextDisposer(listenerManager: ListenerManager) =
        KotlinCompilerContextDisposer(listenerManager)
    val isKotlinScriptCompilationAvoidanceEnabled: Boolean
        get() = System.getProperty(KOTLIN_SCRIPT_COMPILATION_AVOIDANCE_ENABLED_PROPERTY, "true") == "true"
