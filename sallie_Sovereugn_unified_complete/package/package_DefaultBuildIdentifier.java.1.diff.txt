BASE: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\tooling-api\org\gradle\tooling\internal\gradle\DefaultBuildIdentifier.java
OTHER: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\core\org\gradle\api\internal\artifacts\DefaultBuildIdentifier.java
---- DIFF ----
 * Copyright 2018 the original author or authors.
package org.gradle.api.internal.artifacts;
import org.gradle.api.artifacts.component.BuildIdentifier;
import org.gradle.util.Path;
public class DefaultBuildIdentifier implements BuildIdentifier {
    public static final BuildIdentifier ROOT = new DefaultBuildIdentifier(Path.ROOT);
    private final Path buildPath;
    public DefaultBuildIdentifier(Path buildPath) {
        if (!buildPath.isAbsolute()) {
            throw new IllegalArgumentException("Build path must be absolute: " + buildPath);
        }
        this.buildPath = buildPath;
    public String getBuildPath() {
        return buildPath.toString();
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof DefaultBuildIdentifier)) {
            return false;
        }
        DefaultBuildIdentifier that = (DefaultBuildIdentifier) o;
        return buildPath.equals(that.buildPath);
    @Override
    public int hashCode() {
        return buildPath.hashCode();
    }

    @Override
        return "build '" + buildPath + "'";
    }


 * Copyright 2016 the original author or authors.
package org.gradle.tooling.internal.gradle;
import org.gradle.tooling.model.BuildIdentifier;
import java.io.File;
import java.io.Serializable;
public class DefaultBuildIdentifier implements Serializable, GradleBuildIdentity, BuildIdentifier {
    private final File rootDir;
    public DefaultBuildIdentifier(File rootDir) {
        this.rootDir = rootDir.getAbsoluteFile();
    public File getRootDir() {
        return rootDir;
        return "build=" + rootDir.getPath();
