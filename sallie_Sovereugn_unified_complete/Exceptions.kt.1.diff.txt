BASE: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\kotlin-dsl\org\gradle\kotlin\dsl\support\Exceptions.kt
OTHER: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\gradle\gradle-9.0.0\src\configuration-cache-base\org\gradle\internal\cc\base\exceptions\Exceptions.kt
---- DIFF ----
 * Copyright 2024 the original author or authors.
package org.gradle.internal.cc.base.exceptions
import org.gradle.internal.exceptions.Contextual
import org.gradle.internal.exceptions.DefaultMultiCauseException
/**
 * Marker interface for exception handling.
 */
interface ConfigurationCacheThrowable
/**
 * State might be corrupted and should be discarded.
 */
@Contextual
class ConfigurationCacheError(
    error: String,
    cause: Throwable? = null
) : ConfigurationCacheThrowable, Exception(error, cause)
@Contextual
open class ConfigurationCacheException(
    message: () -> String,
    causes: Iterable<Throwable>
) : DefaultMultiCauseException(message, causes), ConfigurationCacheThrowable
 * Copyright 2017 the original author or authors.
package org.gradle.kotlin.dsl.support
import kotlin.reflect.KClass
fun illegalElementType(container: Any, name: String, expectedType: KClass<*>, actualType: KClass<*>) =
    IllegalArgumentException(
        "Element '$name' of type '${actualType.java.name}' from container '$container' cannot be cast to '${expectedType.qualifiedName}'."
    )
internal
fun internalError(): Nothing =
    throw InternalError("This should not happen, please report at https://github.com/gradle/kotlin-dsl/issues/new")
