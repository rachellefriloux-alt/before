BASE: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\node_modules\eslint\lib\shared\naming.js
OTHER: C:\Users\chell\Documents\Sallie_Sovereign\_staging\incoming\node_modules\@eslint\eslintrc\lib\shared\naming.js
---- DIFF ----
const NAMESPACE_REGEX = /^@.*\//iu;
    let normalizedName = name;
    /**
     * On Windows, name can come in with Windows slashes instead of Unix slashes.
     * Normalize to Unix first to avoid errors later on.
     * https://github.com/eslint/eslint/issues/5644
     */
    if (normalizedName.includes("\\")) {
        normalizedName = normalizedName.replace(/\\/gu, "/");
    }
    if (normalizedName.charAt(0) === "@") {
        /**
         * it's a scoped package
         * package name is the prefix, or just a username
         */
        const scopedPackageShortcutRegex = new RegExp(`^(@[^/]+)(?:/(?:${prefix})?)?$`, "u"),
            scopedPackageNameRegex = new RegExp(`^${prefix}(-|$)`, "u");
        if (scopedPackageShortcutRegex.test(normalizedName)) {
            normalizedName = normalizedName.replace(scopedPackageShortcutRegex, `$1/${prefix}`);
        } else if (!scopedPackageNameRegex.test(normalizedName.split("/")[1])) {
            /**
             * for scoped packages, insert the prefix after the first / unless
             * the path is already @scope/eslint or @scope/eslint-xxx-yyy
             */
            normalizedName = normalizedName.replace(/^@([^/]+)\/(.*)$/u, `@$1/${prefix}-$2`);
        }
    } else if (!normalizedName.startsWith(`${prefix}-`)) {
        normalizedName = `${prefix}-${normalizedName}`;
    }
    return normalizedName;
    if (fullname[0] === "@") {
        let matchResult = new RegExp(`^(@[^/]+)/${prefix}$`, "u").exec(fullname);
        if (matchResult) {
            return matchResult[1];
        }
        matchResult = new RegExp(`^(@[^/]+)/${prefix}-(.+)$`, "u").exec(fullname);
        if (matchResult) {
            return `${matchResult[1]}/${matchResult[2]}`;
        }
    } else if (fullname.startsWith(`${prefix}-`)) {
        return fullname.slice(prefix.length + 1);
    }
    return fullname;
    const match = term.match(NAMESPACE_REGEX);
    return match ? match[0] : "";

export {
    normalizePackageName,
    getShorthandName,
    getNamespaceFromTerm
"use strict";
const NAMESPACE_REGEX = /^@.*\//u;
	let normalizedName = name;
	/**
	 * On Windows, name can come in with Windows slashes instead of Unix slashes.
	 * Normalize to Unix first to avoid errors later on.
	 * https://github.com/eslint/eslint/issues/5644
	 */
	if (normalizedName.includes("\\")) {
		normalizedName = normalizedName.replace(/\\/gu, "/");
	}
	if (normalizedName.charAt(0) === "@") {
		/**
		 * it's a scoped package
		 * package name is the prefix, or just a username
		 */
		const scopedPackageShortcutRegex = new RegExp(
				`^(@[^/]+)(?:/(?:${prefix})?)?$`,
				"u",
			),
			scopedPackageNameRegex = new RegExp(`^${prefix}(-|$)`, "u");
		if (scopedPackageShortcutRegex.test(normalizedName)) {
			normalizedName = normalizedName.replace(
				scopedPackageShortcutRegex,
				`$1/${prefix}`,
			);
		} else if (!scopedPackageNameRegex.test(normalizedName.split("/")[1])) {
			/**
			 * for scoped packages, insert the prefix after the first / unless
			 * the path is already @scope/eslint or @scope/eslint-xxx-yyy
			 */
			normalizedName = normalizedName.replace(
				/^@([^/]+)\/(.*)$/u,
				`@$1/${prefix}-$2`,
			);
		}
	} else if (!normalizedName.startsWith(`${prefix}-`)) {
		normalizedName = `${prefix}-${normalizedName}`;
	}
	return normalizedName;
	if (fullname[0] === "@") {
		let matchResult = new RegExp(`^(@[^/]+)/${prefix}$`, "u").exec(
			fullname,
		);
		if (matchResult) {
			return matchResult[1];
		}
		matchResult = new RegExp(`^(@[^/]+)/${prefix}-(.+)$`, "u").exec(
			fullname,
		);
		if (matchResult) {
			return `${matchResult[1]}/${matchResult[2]}`;
		}
	} else if (fullname.startsWith(`${prefix}-`)) {
		return fullname.slice(prefix.length + 1);
	}
	return fullname;
	const match = term.match(NAMESPACE_REGEX);
	return match ? match[0] : "";
module.exports = {
	normalizePackageName,
	getShorthandName,
	getNamespaceFromTerm,
