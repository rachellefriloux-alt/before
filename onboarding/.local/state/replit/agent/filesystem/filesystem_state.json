{"file_contents":{"README.md":{"content":"# Welcome to your Expo app 👋\n\nThis is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).\n\n## Get started\n\n1. Install dependencies\n\n   ```bash\n   npm install\n   ```\n\n2. Start the app\n\n   ```bash\n   npx expo start\n   ```\n\nIn the output, you'll find options to open the app in a\n\n- [development build](https://docs.expo.dev/develop/development-builds/introduction/)\n- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)\n- [iOS simulator](https://docs.expo.dev/workflow/ios-simulator/)\n- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo\n\nYou can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).\n\n## Get a fresh project\n\nWhen you're ready, run:\n\n```bash\nnpm run reset-project\n```\n\nThis command will move the starter code to the **app-example** directory and create a blank **app** directory where you can start developing.\n\n## Learn more\n\nTo learn more about developing your project with Expo, look at the following resources:\n\n- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).\n- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.\n\n## Join the community\n\nJoin our community of developers creating universal apps.\n\n- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.\n- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.\n","size_bytes":1741},"eslint.config.js":{"content":"// https://docs.expo.dev/guides/using-eslint/\nconst { defineConfig } = require('eslint/config');\nconst expoConfig = require('eslint-config-expo/flat');\n\nmodule.exports = defineConfig([\n  expoConfig,\n  {\n    ignores: ['dist/*'],\n  },\n]);\n","size_bytes":237},"app/+not-found.tsx":{"content":"import { Link, Stack } from 'expo-router';\nimport { StyleSheet } from 'react-native';\n\nimport { ThemedText } from '@/components/ThemedText';\nimport { ThemedView } from '@/components/ThemedView';\n\nexport default function NotFoundScreen() {\n  return (\n    <>\n      <Stack.Screen options={{ title: 'Oops!' }} />\n      <ThemedView style={styles.container}>\n        <ThemedText type=\"title\">This screen does not exist.</ThemedText>\n        <Link href=\"/\" style={styles.link}>\n          <ThemedText type=\"link\">Go to home screen!</ThemedText>\n        </Link>\n      </ThemedView>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n});\n","size_bytes":793},"app/_layout.tsx":{"content":"import { DarkTheme, DefaultTheme, ThemeProvider } from '@react-navigation/native';\nimport { useFonts } from 'expo-font';\nimport { Stack } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport 'react-native-reanimated';\n\nimport { useColorScheme } from '@/hooks/useColorScheme';\n\nexport default function RootLayout() {\n  const colorScheme = useColorScheme();\n  const [loaded] = useFonts({\n    SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),\n  });\n\n  if (!loaded) {\n    // Async font loading only occurs in development.\n    return null;\n  }\n\n  return (\n    <ThemeProvider value={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <Stack>\n        <Stack.Screen name=\"(tabs)\" options={{ headerShown: false }} />\n        <Stack.Screen name=\"+not-found\" />\n      </Stack>\n      <StatusBar style=\"auto\" />\n    </ThemeProvider>\n  );\n}\n","size_bytes":864},"components/Collapsible.tsx":{"content":"import { PropsWithChildren, useState } from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport { ThemedText } from '@/components/ThemedText';\nimport { ThemedView } from '@/components/ThemedView';\nimport { IconSymbol } from '@/components/ui/IconSymbol';\nimport { Colors } from '@/constants/Colors';\nimport { useColorScheme } from '@/hooks/useColorScheme';\n\nexport function Collapsible({ children, title }: PropsWithChildren & { title: string }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const theme = useColorScheme() ?? 'light';\n\n  return (\n    <ThemedView>\n      <TouchableOpacity\n        style={styles.heading}\n        onPress={() => setIsOpen((value) => !value)}\n        activeOpacity={0.8}>\n        <IconSymbol\n          name=\"chevron.right\"\n          size={18}\n          weight=\"medium\"\n          color={theme === 'light' ? Colors.light.icon : Colors.dark.icon}\n          style={{ transform: [{ rotate: isOpen ? '90deg' : '0deg' }] }}\n        />\n\n        <ThemedText type=\"defaultSemiBold\">{title}</ThemedText>\n      </TouchableOpacity>\n      {isOpen && <ThemedView style={styles.content}>{children}</ThemedView>}\n    </ThemedView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  heading: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  content: {\n    marginTop: 6,\n    marginLeft: 24,\n  },\n});\n","size_bytes":1358},"components/ExternalLink.tsx":{"content":"import { Href, Link } from 'expo-router';\nimport { openBrowserAsync } from 'expo-web-browser';\nimport { type ComponentProps } from 'react';\nimport { Platform } from 'react-native';\n\ntype Props = Omit<ComponentProps<typeof Link>, 'href'> & { href: Href & string };\n\nexport function ExternalLink({ href, ...rest }: Props) {\n  return (\n    <Link\n      target=\"_blank\"\n      {...rest}\n      href={href}\n      onPress={async (event) => {\n        if (Platform.OS !== 'web') {\n          // Prevent the default behavior of linking to the default browser on native.\n          event.preventDefault();\n          // Open the link in an in-app browser.\n          await openBrowserAsync(href);\n        }\n      }}\n    />\n  );\n}\n","size_bytes":713},"components/HapticTab.tsx":{"content":"import { BottomTabBarButtonProps } from '@react-navigation/bottom-tabs';\nimport { PlatformPressable } from '@react-navigation/elements';\nimport * as Haptics from 'expo-haptics';\n\nexport function HapticTab(props: BottomTabBarButtonProps) {\n  return (\n    <PlatformPressable\n      {...props}\n      onPressIn={(ev) => {\n        if (process.env.EXPO_OS === 'ios') {\n          // Add a soft haptic feedback when pressing down on the tabs.\n          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n        }\n        props.onPressIn?.(ev);\n      }}\n    />\n  );\n}\n","size_bytes":564},"components/HelloWave.tsx":{"content":"import { useEffect } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n  withRepeat,\n  withSequence,\n  withTiming,\n} from 'react-native-reanimated';\n\nimport { ThemedText } from '@/components/ThemedText';\n\nexport function HelloWave() {\n  const rotationAnimation = useSharedValue(0);\n\n  useEffect(() => {\n    rotationAnimation.value = withRepeat(\n      withSequence(withTiming(25, { duration: 150 }), withTiming(0, { duration: 150 })),\n      4 // Run the animation 4 times\n    );\n  }, [rotationAnimation]);\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    transform: [{ rotate: `${rotationAnimation.value}deg` }],\n  }));\n\n  return (\n    <Animated.View style={animatedStyle}>\n      <ThemedText style={styles.text}>👋</ThemedText>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 28,\n    lineHeight: 32,\n    marginTop: -6,\n  },\n});\n","size_bytes":939},"components/ParallaxScrollView.tsx":{"content":"import type { PropsWithChildren, ReactElement } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated, {\n  interpolate,\n  useAnimatedRef,\n  useAnimatedStyle,\n  useScrollViewOffset,\n} from 'react-native-reanimated';\n\nimport { ThemedView } from '@/components/ThemedView';\nimport { useBottomTabOverflow } from '@/components/ui/TabBarBackground';\nimport { useColorScheme } from '@/hooks/useColorScheme';\n\nconst HEADER_HEIGHT = 250;\n\ntype Props = PropsWithChildren<{\n  headerImage: ReactElement;\n  headerBackgroundColor: { dark: string; light: string };\n}>;\n\nexport default function ParallaxScrollView({\n  children,\n  headerImage,\n  headerBackgroundColor,\n}: Props) {\n  const colorScheme = useColorScheme() ?? 'light';\n  const scrollRef = useAnimatedRef<Animated.ScrollView>();\n  const scrollOffset = useScrollViewOffset(scrollRef);\n  const bottom = useBottomTabOverflow();\n  const headerAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateY: interpolate(\n            scrollOffset.value,\n            [-HEADER_HEIGHT, 0, HEADER_HEIGHT],\n            [-HEADER_HEIGHT / 2, 0, HEADER_HEIGHT * 0.75]\n          ),\n        },\n        {\n          scale: interpolate(scrollOffset.value, [-HEADER_HEIGHT, 0, HEADER_HEIGHT], [2, 1, 1]),\n        },\n      ],\n    };\n  });\n\n  return (\n    <ThemedView style={styles.container}>\n      <Animated.ScrollView\n        ref={scrollRef}\n        scrollEventThrottle={16}\n        scrollIndicatorInsets={{ bottom }}\n        contentContainerStyle={{ paddingBottom: bottom }}>\n        <Animated.View\n          style={[\n            styles.header,\n            { backgroundColor: headerBackgroundColor[colorScheme] },\n            headerAnimatedStyle,\n          ]}>\n          {headerImage}\n        </Animated.View>\n        <ThemedView style={styles.content}>{children}</ThemedView>\n      </Animated.ScrollView>\n    </ThemedView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    height: HEADER_HEIGHT,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n    padding: 32,\n    gap: 16,\n    overflow: 'hidden',\n  },\n});\n","size_bytes":2143},"components/ThemedText.tsx":{"content":"import { StyleSheet, Text, type TextProps } from 'react-native';\n\nimport { useThemeColor } from '@/hooks/useThemeColor';\n\nexport type ThemedTextProps = TextProps & {\n  lightColor?: string;\n  darkColor?: string;\n  type?: 'default' | 'title' | 'defaultSemiBold' | 'subtitle' | 'link';\n};\n\nexport function ThemedText({\n  style,\n  lightColor,\n  darkColor,\n  type = 'default',\n  ...rest\n}: ThemedTextProps) {\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return (\n    <Text\n      style={[\n        { color },\n        type === 'default' ? styles.default : undefined,\n        type === 'title' ? styles.title : undefined,\n        type === 'defaultSemiBold' ? styles.defaultSemiBold : undefined,\n        type === 'subtitle' ? styles.subtitle : undefined,\n        type === 'link' ? styles.link : undefined,\n        style,\n      ]}\n      {...rest}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  default: {\n    fontSize: 16,\n    lineHeight: 24,\n  },\n  defaultSemiBold: {\n    fontSize: 16,\n    lineHeight: 24,\n    fontWeight: '600',\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    lineHeight: 32,\n  },\n  subtitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    lineHeight: 30,\n    fontSize: 16,\n    color: '#0a7ea4',\n  },\n});\n","size_bytes":1283},"components/ThemedView.tsx":{"content":"import { View, type ViewProps } from 'react-native';\n\nimport { useThemeColor } from '@/hooks/useThemeColor';\n\nexport type ThemedViewProps = ViewProps & {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport function ThemedView({ style, lightColor, darkColor, ...otherProps }: ThemedViewProps) {\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <View style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","size_bytes":468},"constants/Colors.ts":{"content":"/**\n * Below are the colors that are used in the app. The colors are defined in the light and dark mode.\n * There are many other ways to style your app. For example, [Nativewind](https://www.nativewind.dev/), [Tamagui](https://tamagui.dev/), [unistyles](https://reactnativeunistyles.vercel.app), etc.\n */\n\nconst tintColorLight = '#0a7ea4';\nconst tintColorDark = '#fff';\n\nexport const Colors = {\n  light: {\n    text: '#11181C',\n    background: '#fff',\n    tint: tintColorLight,\n    icon: '#687076',\n    tabIconDefault: '#687076',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#ECEDEE',\n    background: '#151718',\n    tint: tintColorDark,\n    icon: '#9BA1A6',\n    tabIconDefault: '#9BA1A6',\n    tabIconSelected: tintColorDark,\n  },\n};\n","size_bytes":750},"hooks/useColorScheme.ts":{"content":"export { useColorScheme } from 'react-native';\n","size_bytes":47},"hooks/useColorScheme.web.ts":{"content":"import { useEffect, useState } from 'react';\nimport { useColorScheme as useRNColorScheme } from 'react-native';\n\n/**\n * To support static rendering, this value needs to be re-calculated on the client side for web\n */\nexport function useColorScheme() {\n  const [hasHydrated, setHasHydrated] = useState(false);\n\n  useEffect(() => {\n    setHasHydrated(true);\n  }, []);\n\n  const colorScheme = useRNColorScheme();\n\n  if (hasHydrated) {\n    return colorScheme;\n  }\n\n  return 'light';\n}\n","size_bytes":480},"hooks/useThemeColor.ts":{"content":"/**\n * Learn more about light and dark modes:\n * https://docs.expo.dev/guides/color-schemes/\n */\n\nimport { Colors } from '@/constants/Colors';\nimport { useColorScheme } from '@/hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme() ?? 'light';\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n","size_bytes":536},"scripts/reset-project.js":{"content":"#!/usr/bin/env node\n\n/**\n * This script is used to reset the project to a blank state.\n * It deletes or moves the /app, /components, /hooks, /scripts, and /constants directories to /app-example based on user input and creates a new /app directory with an index.tsx and _layout.tsx file.\n * You can remove the `reset-project` script from package.json and safely delete this file after running it.\n */\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst readline = require(\"readline\");\n\nconst root = process.cwd();\nconst oldDirs = [\"app\", \"components\", \"hooks\", \"constants\", \"scripts\"];\nconst exampleDir = \"app-example\";\nconst newAppDir = \"app\";\nconst exampleDirPath = path.join(root, exampleDir);\n\nconst indexContent = `import { Text, View } from \"react-native\";\n\nexport default function Index() {\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Text>Edit app/index.tsx to edit this screen.</Text>\n    </View>\n  );\n}\n`;\n\nconst layoutContent = `import { Stack } from \"expo-router\";\n\nexport default function RootLayout() {\n  return <Stack />;\n}\n`;\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nconst moveDirectories = async (userInput) => {\n  try {\n    if (userInput === \"y\") {\n      // Create the app-example directory\n      await fs.promises.mkdir(exampleDirPath, { recursive: true });\n      console.log(`📁 /${exampleDir} directory created.`);\n    }\n\n    // Move old directories to new app-example directory or delete them\n    for (const dir of oldDirs) {\n      const oldDirPath = path.join(root, dir);\n      if (fs.existsSync(oldDirPath)) {\n        if (userInput === \"y\") {\n          const newDirPath = path.join(root, exampleDir, dir);\n          await fs.promises.rename(oldDirPath, newDirPath);\n          console.log(`➡️ /${dir} moved to /${exampleDir}/${dir}.`);\n        } else {\n          await fs.promises.rm(oldDirPath, { recursive: true, force: true });\n          console.log(`❌ /${dir} deleted.`);\n        }\n      } else {\n        console.log(`➡️ /${dir} does not exist, skipping.`);\n      }\n    }\n\n    // Create new /app directory\n    const newAppDirPath = path.join(root, newAppDir);\n    await fs.promises.mkdir(newAppDirPath, { recursive: true });\n    console.log(\"\\n📁 New /app directory created.\");\n\n    // Create index.tsx\n    const indexPath = path.join(newAppDirPath, \"index.tsx\");\n    await fs.promises.writeFile(indexPath, indexContent);\n    console.log(\"📄 app/index.tsx created.\");\n\n    // Create _layout.tsx\n    const layoutPath = path.join(newAppDirPath, \"_layout.tsx\");\n    await fs.promises.writeFile(layoutPath, layoutContent);\n    console.log(\"📄 app/_layout.tsx created.\");\n\n    console.log(\"\\n✅ Project reset complete. Next steps:\");\n    console.log(\n      `1. Run \\`npx expo start\\` to start a development server.\\n2. Edit app/index.tsx to edit the main screen.${\n        userInput === \"y\"\n          ? `\\n3. Delete the /${exampleDir} directory when you're done referencing it.`\n          : \"\"\n      }`\n    );\n  } catch (error) {\n    console.error(`❌ Error during script execution: ${error.message}`);\n  }\n};\n\nrl.question(\n  \"Do you want to move existing files to /app-example instead of deleting them? (Y/n): \",\n  (answer) => {\n    const userInput = answer.trim().toLowerCase() || \"y\";\n    if (userInput === \"y\" || userInput === \"n\") {\n      moveDirectories(userInput).finally(() => rl.close());\n    } else {\n      console.log(\"❌ Invalid input. Please enter 'Y' or 'N'.\");\n      rl.close();\n    }\n  }\n);\n","size_bytes":3608},"app/(tabs)/_layout.tsx":{"content":"import { Tabs } from 'expo-router';\nimport React from 'react';\nimport { Platform } from 'react-native';\n\nimport { HapticTab } from '@/components/HapticTab';\nimport { IconSymbol } from '@/components/ui/IconSymbol';\nimport TabBarBackground from '@/components/ui/TabBarBackground';\nimport { Colors } from '@/constants/Colors';\nimport { useColorScheme } from '@/hooks/useColorScheme';\n\nexport default function TabLayout() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <Tabs\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme ?? 'light'].tint,\n        headerShown: false,\n        tabBarButton: HapticTab,\n        tabBarBackground: TabBarBackground,\n        tabBarStyle: Platform.select({\n          ios: {\n            // Use a transparent background on iOS to show the blur effect\n            position: 'absolute',\n          },\n          default: {},\n        }),\n      }}>\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Home',\n          tabBarIcon: ({ color }) => <IconSymbol size={28} name=\"house.fill\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"explore\"\n        options={{\n          title: 'Explore',\n          tabBarIcon: ({ color }) => <IconSymbol size={28} name=\"paperplane.fill\" color={color} />,\n        }}\n      />\n    </Tabs>\n  );\n}\n","size_bytes":1328},"app/(tabs)/explore.tsx":{"content":"import { Image } from 'expo-image';\nimport { Platform, StyleSheet } from 'react-native';\n\nimport { Collapsible } from '@/components/Collapsible';\nimport { ExternalLink } from '@/components/ExternalLink';\nimport ParallaxScrollView from '@/components/ParallaxScrollView';\nimport { ThemedText } from '@/components/ThemedText';\nimport { ThemedView } from '@/components/ThemedView';\nimport { IconSymbol } from '@/components/ui/IconSymbol';\n\nexport default function TabTwoScreen() {\n  return (\n    <ParallaxScrollView\n      headerBackgroundColor={{ light: '#D0D0D0', dark: '#353636' }}\n      headerImage={\n        <IconSymbol\n          size={310}\n          color=\"#808080\"\n          name=\"chevron.left.forwardslash.chevron.right\"\n          style={styles.headerImage}\n        />\n      }>\n      <ThemedView style={styles.titleContainer}>\n        <ThemedText type=\"title\">Explore</ThemedText>\n      </ThemedView>\n      <ThemedText>This app includes example code to help you get started.</ThemedText>\n      <Collapsible title=\"File-based routing\">\n        <ThemedText>\n          This app has two screens:{' '}\n          <ThemedText type=\"defaultSemiBold\">app/(tabs)/index.tsx</ThemedText> and{' '}\n          <ThemedText type=\"defaultSemiBold\">app/(tabs)/explore.tsx</ThemedText>\n        </ThemedText>\n        <ThemedText>\n          The layout file in <ThemedText type=\"defaultSemiBold\">app/(tabs)/_layout.tsx</ThemedText>{' '}\n          sets up the tab navigator.\n        </ThemedText>\n        <ExternalLink href=\"https://docs.expo.dev/router/introduction\">\n          <ThemedText type=\"link\">Learn more</ThemedText>\n        </ExternalLink>\n      </Collapsible>\n      <Collapsible title=\"Android, iOS, and web support\">\n        <ThemedText>\n          You can open this project on Android, iOS, and the web. To open the web version, press{' '}\n          <ThemedText type=\"defaultSemiBold\">w</ThemedText> in the terminal running this project.\n        </ThemedText>\n      </Collapsible>\n      <Collapsible title=\"Images\">\n        <ThemedText>\n          For static images, you can use the <ThemedText type=\"defaultSemiBold\">@2x</ThemedText> and{' '}\n          <ThemedText type=\"defaultSemiBold\">@3x</ThemedText> suffixes to provide files for\n          different screen densities\n        </ThemedText>\n        <Image source={require('@/assets/images/react-logo.png')} style={{ alignSelf: 'center' }} />\n        <ExternalLink href=\"https://reactnative.dev/docs/images\">\n          <ThemedText type=\"link\">Learn more</ThemedText>\n        </ExternalLink>\n      </Collapsible>\n      <Collapsible title=\"Custom fonts\">\n        <ThemedText>\n          Open <ThemedText type=\"defaultSemiBold\">app/_layout.tsx</ThemedText> to see how to load{' '}\n          <ThemedText style={{ fontFamily: 'SpaceMono' }}>\n            custom fonts such as this one.\n          </ThemedText>\n        </ThemedText>\n        <ExternalLink href=\"https://docs.expo.dev/versions/latest/sdk/font\">\n          <ThemedText type=\"link\">Learn more</ThemedText>\n        </ExternalLink>\n      </Collapsible>\n      <Collapsible title=\"Light and dark mode components\">\n        <ThemedText>\n          This template has light and dark mode support. The{' '}\n          <ThemedText type=\"defaultSemiBold\">useColorScheme()</ThemedText> hook lets you inspect\n          what the user&apos;s current color scheme is, and so you can adjust UI colors accordingly.\n        </ThemedText>\n        <ExternalLink href=\"https://docs.expo.dev/develop/user-interface/color-themes/\">\n          <ThemedText type=\"link\">Learn more</ThemedText>\n        </ExternalLink>\n      </Collapsible>\n      <Collapsible title=\"Animations\">\n        <ThemedText>\n          This template includes an example of an animated component. The{' '}\n          <ThemedText type=\"defaultSemiBold\">components/HelloWave.tsx</ThemedText> component uses\n          the powerful <ThemedText type=\"defaultSemiBold\">react-native-reanimated</ThemedText>{' '}\n          library to create a waving hand animation.\n        </ThemedText>\n        {Platform.select({\n          ios: (\n            <ThemedText>\n              The <ThemedText type=\"defaultSemiBold\">components/ParallaxScrollView.tsx</ThemedText>{' '}\n              component provides a parallax effect for the header image.\n            </ThemedText>\n          ),\n        })}\n      </Collapsible>\n    </ParallaxScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  headerImage: {\n    color: '#808080',\n    bottom: -90,\n    left: -35,\n    position: 'absolute',\n  },\n  titleContainer: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n});\n","size_bytes":4576},"app/(tabs)/index.tsx":{"content":"import { Image } from \"expo-image\";\nimport { Platform, StyleSheet } from \"react-native\";\n\nimport { HelloWave } from \"@/components/HelloWave\";\nimport ParallaxScrollView from \"@/components/ParallaxScrollView\";\nimport { ThemedText } from \"@/components/ThemedText\";\nimport { ThemedView } from \"@/components/ThemedView\";\n\nexport default function HomeScreen() {\n  return (\n    <ParallaxScrollView\n      headerBackgroundColor={{ light: \"#A1CEDC\", dark: \"#1D3D47\" }}\n      headerImage={\n        <Image\n          source={require(\"@/assets/images/partial-react-logo.png\")}\n          style={styles.reactLogo}\n        />\n      }\n    >\n      <ThemedView style={styles.titleContainer}>\n        <ThemedText type=\"title\">Replit + Expo</ThemedText>\n        <HelloWave />\n      </ThemedView>\n      <ThemedView style={styles.stepContainer}>\n        <ThemedText type=\"subtitle\">Step 1: Try it</ThemedText>\n        <ThemedText>\n          Edit{\" \"}\n          <ThemedText type=\"defaultSemiBold\">app/(tabs)/index.tsx</ThemedText>{\" \"}\n          to see changes. Press{\" \"}\n          <ThemedText type=\"defaultSemiBold\">\n            {Platform.select({\n              ios: \"cmd + d\",\n              android: \"cmd + m\",\n              web: \"F12\",\n            })}\n          </ThemedText>{\" \"}\n          to open developer tools.\n        </ThemedText>\n      </ThemedView>\n      <ThemedView style={styles.stepContainer}>\n        <ThemedText type=\"subtitle\">Step 2: Explore</ThemedText>\n        <ThemedText>\n          {`Tap the Explore tab to learn more about what's included in this starter app.`}\n        </ThemedText>\n      </ThemedView>\n      <ThemedView style={styles.stepContainer}>\n        <ThemedText type=\"subtitle\">Step 3: Get a fresh start</ThemedText>\n        <ThemedText>\n          {`When you're ready, run `}\n          <ThemedText type=\"defaultSemiBold\">\n            npm run reset-project\n          </ThemedText>{\" \"}\n          to get a fresh <ThemedText type=\"defaultSemiBold\">app</ThemedText>{\" \"}\n          directory. This will move the current{\" \"}\n          <ThemedText type=\"defaultSemiBold\">app</ThemedText> to{\" \"}\n          <ThemedText type=\"defaultSemiBold\">app-example</ThemedText>.\n        </ThemedText>\n      </ThemedView>\n    </ParallaxScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  titleContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    gap: 8,\n  },\n  stepContainer: {\n    gap: 8,\n    marginBottom: 8,\n  },\n  reactLogo: {\n    height: 178,\n    width: 290,\n    bottom: 0,\n    left: 0,\n    position: \"absolute\",\n  },\n});\n","size_bytes":2539},"components/ui/IconSymbol.ios.tsx":{"content":"import { SymbolView, SymbolViewProps, SymbolWeight } from 'expo-symbols';\nimport { StyleProp, ViewStyle } from 'react-native';\n\nexport function IconSymbol({\n  name,\n  size = 24,\n  color,\n  style,\n  weight = 'regular',\n}: {\n  name: SymbolViewProps['name'];\n  size?: number;\n  color: string;\n  style?: StyleProp<ViewStyle>;\n  weight?: SymbolWeight;\n}) {\n  return (\n    <SymbolView\n      weight={weight}\n      tintColor={color}\n      resizeMode=\"scaleAspectFit\"\n      name={name}\n      style={[\n        {\n          width: size,\n          height: size,\n        },\n        style,\n      ]}\n    />\n  );\n}\n","size_bytes":598},"components/ui/IconSymbol.tsx":{"content":"// Fallback for using MaterialIcons on Android and web.\n\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\nimport { SymbolWeight, SymbolViewProps } from 'expo-symbols';\nimport { ComponentProps } from 'react';\nimport { OpaqueColorValue, type StyleProp, type TextStyle } from 'react-native';\n\ntype IconMapping = Record<SymbolViewProps['name'], ComponentProps<typeof MaterialIcons>['name']>;\ntype IconSymbolName = keyof typeof MAPPING;\n\n/**\n * Add your SF Symbols to Material Icons mappings here.\n * - see Material Icons in the [Icons Directory](https://icons.expo.fyi).\n * - see SF Symbols in the [SF Symbols](https://developer.apple.com/sf-symbols/) app.\n */\nconst MAPPING = {\n  'house.fill': 'home',\n  'paperplane.fill': 'send',\n  'chevron.left.forwardslash.chevron.right': 'code',\n  'chevron.right': 'chevron-right',\n} as IconMapping;\n\n/**\n * An icon component that uses native SF Symbols on iOS, and Material Icons on Android and web.\n * This ensures a consistent look across platforms, and optimal resource usage.\n * Icon `name`s are based on SF Symbols and require manual mapping to Material Icons.\n */\nexport function IconSymbol({\n  name,\n  size = 24,\n  color,\n  style,\n}: {\n  name: IconSymbolName;\n  size?: number;\n  color: string | OpaqueColorValue;\n  style?: StyleProp<TextStyle>;\n  weight?: SymbolWeight;\n}) {\n  return <MaterialIcons color={color} size={size} name={MAPPING[name]} style={style} />;\n}\n","size_bytes":1422},"components/ui/TabBarBackground.ios.tsx":{"content":"import { useBottomTabBarHeight } from '@react-navigation/bottom-tabs';\nimport { BlurView } from 'expo-blur';\nimport { StyleSheet } from 'react-native';\n\nexport default function BlurTabBarBackground() {\n  return (\n    <BlurView\n      // System chrome material automatically adapts to the system's theme\n      // and matches the native tab bar appearance on iOS.\n      tint=\"systemChromeMaterial\"\n      intensity={100}\n      style={StyleSheet.absoluteFill}\n    />\n  );\n}\n\nexport function useBottomTabOverflow() {\n  return useBottomTabBarHeight();\n}\n","size_bytes":547},"components/ui/TabBarBackground.tsx":{"content":"// This is a shim for web and Android where the tab bar is generally opaque.\nexport default undefined;\n\nexport function useBottomTabOverflow() {\n  return 0;\n}\n","size_bytes":159}},"version":1}